/**********************************************************
 * Script to generate Array.sol file contains helpers to 
 * create dynamic arrays of variable sizes for solidity
 * base types.
 **********************************************************/

import fs from 'fs';

const HEADER = `
// AUTOGENERATED FILE (bin/gen-array-helpers.ts) DON'T MODIFY DIRECTLY
// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity <0.9.0;
`

const TARGETS = {
  uints: {
    type: "uint256"
  },
  addresses: {
    type: 'address'
  },
  bytes4s: {
    type: 'bytes4'
  },
  bytes32s: {
    type: 'bytes32'
  }
} as const;
const MAX_SIZE = 8;

const templateFnAssignments = (size: number): string => {
  let content = '';
  for (let j = 0; j < size; j++) {
    content += `    arr[${j}] = e${j};\n`
  }
  return content;
}

const templateFnArgs = (type: string, size: number): string => {
  let content = '';
  for (let j = 0; j < size; j++) {
    content += `    ${type} e${j}${j < size - 1 ? ',\n' : ''}`
  }
  return content;
}

const templateFunction = (fn: string, type: string, size: number) => `
function ${fn}(
${templateFnArgs(type, size)}
) pure returns (${type}[] memory arr) {
    arr = new ${type}[](${size});
${templateFnAssignments(size)}
    return arr;
}
`

const templateContains = (type: string) => `
function contains(${type}[] memory self, ${type} value) pure returns(bool) {
    for (uint256 i = 0; i < self.length; i++) {
        if (self[i] == value) {
            return true;
        }
    }
    return false;
}
`

let fileContent = HEADER;
for (const [fn, config] of Object.entries(TARGETS)) {
  const { type } = config;
  for (let i = 1; i <= MAX_SIZE; i++) {
    fileContent += templateFunction(fn, type, i);
  }
  fileContent += templateContains(type);
}

fs.writeFileSync("src/Array.sol", fileContent);
